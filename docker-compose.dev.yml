services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      # Map container 5432 to a host port that won't clash with a local Postgres.
      # Set DB_PORT_HOST in .env (e.g., DB_PORT_HOST=5433). Defaults to 5432 if unset.
      - "${DB_PORT_HOST:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: >
      bash -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
  scheduler:
    build:
      context: ./backend/scheduler
      dockerfile: Dockerfile
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./backend/scheduler:/app
    command: go run scheduler.go
  frontend:
    build:
      context: ./frontend
      # Use the final stage image; we'll install dev deps at runtime
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: development
    command: pnpm run dev
volumes:
  db_data:
